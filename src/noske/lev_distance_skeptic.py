import sys
import pandas as pd
import re
from Levenshtein import distance as levenshtein_distance

# Adjusting the sys.path to be able to import the modules from different directories
sys.path.append(r"E:\Code\eptic\src\skeptic")
sys.path.append(r"E:\Code\eptic\src\noske")

# Importing the extract_columns module
import extract_clean_texts_skeptic
# Importing the extract_texts_clean module
import extract_clean_texts_noske

def clean_text(text):
    # Replace double whitespaces with single whitespace
    text = re.sub(r'\s+', ' ', text)
    return text.strip()  # This removes any leading or trailing whitespace

def main():
    # Run the extract_columns module
    extract_clean_texts_skeptic.main()
    
    # Load the Excel file generated by extract_columns
    df_texts = pd.read_excel("clean_texts_skeptic.xlsx")
    
    # Store original texts in a new column before cleaning
    df_texts['original_text'] = df_texts['plain_text']
    
    # Clean the texts
    df_texts['cleaned_text'] = df_texts['plain_text'].apply(clean_text)
    
    # Initialize columns to store the Levenshtein Distance and matching text
    df_texts['levenshtein_distance'] = None
    df_texts['matching_cleaned_text'] = None
    df_texts['matching_text_id'] = None  # Column to store the text.id of the matching text
    
    # Run the extract_texts_clean module
    extract_clean_texts_noske.main()
    
    # Load the Excel file generated by extract_texts_clean
    df_cleaned_texts = pd.read_excel("clean_texts_noske.xlsx")
    
    # Store original texts in a new column before cleaning
    df_cleaned_texts['original_text'] = df_cleaned_texts['s.text_processed']
    
    # Clean the texts from df_cleaned_texts
    df_cleaned_texts['cleaned_text'] = df_cleaned_texts['s.text_processed'].apply(clean_text)

    # For each text in df_texts
    for index, row in df_texts.iterrows():
        # Text for comparison from the current row
        current_text = row['cleaned_text']
        spoken_written = row['spoken_written']
        source_target = row['source_target']

        filtered_texts = df_cleaned_texts[(df_cleaned_texts['spoken_written'] == spoken_written) & (df_cleaned_texts['source_target'] == source_target)]
        
        # Initialize variables to store the results
        min_distance = float('inf')
        matching_text_id = None
        
        # Compare with each text in df_cleaned_texts
        for idx, clean_row in filtered_texts.iterrows():
            # Text for comparison
            comparison_text = clean_row['cleaned_text']
            
            # Calculate Levenshtein distance
            dist = levenshtein_distance(current_text, comparison_text)
            
            # Check if this distance is the smallest we've seen so far
            if dist < min_distance:
                min_distance = dist
                matching_text_id = clean_row['text.id']
        
        # Assign the results to the DataFrame
        df_texts.at[index, 'levenshtein_distance'] = min_distance
        df_texts.at[index, 'matching_cleaned_text'] = df_cleaned_texts.loc[df_cleaned_texts['text.id'] == matching_text_id, 'cleaned_text'].iloc[0]
        df_texts.at[index, 'matching_text_id'] = matching_text_id

    # Save DataFrame to Excel file
    df_texts.to_excel('levenshtein_distance_skeptic.xlsx', index=False, engine='openpyxl')

    print("Results saved to levenshtein_distance_skeptic.xlsx")

if __name__ == "__main__":
    main()